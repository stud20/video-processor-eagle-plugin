/**
 * Video Processor Eagle Plugin - Main Module
 * Modernized and refactored for clarity, maintainability, and reliability
 */

// === Core State Management ===
const AppState = {
  selectedFiles: [],
  currentFile: null,
  batchMode: false,
  modulesLoaded: false,
  eagleReady: false,
  processing: false,
  settings: {
    sensitivity: 0.3,
    quality: 'medium',
    inHandle: 0.5,
    outHandle: 0.5,
    outputMode: 'both'
  }
};

// === Module Loader ===
class ModuleLoader {
  static async load() {
    const modules = [
      'modules/video-analyzer.js',
      'modules/frame-extractor.js', 
      'modules/clip-extractor.js',
      'modules/eagle-importer.js'
    ];
    
    try {
      await Promise.all(modules.map(this.loadScript));
      this.verifyModules();
      AppState.modulesLoaded = true;
      console.log('✅ All modules loaded successfully');
    } catch (error) {
      console.error('❌ Module loading failed:', error);
      throw error;
    }
  }
  
  static loadScript(src) {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = src;
      script.onload = resolve;
      script.onerror = () => reject(new Error(`Failed to load ${src}`));
      document.head.appendChild(script);
    });
  }
  
  static verifyModules() {
    const required = ['VideoAnalyzer', 'FrameExtractor', 'ClipExtractor', 'EagleImporter'];
    const missing = required.filter(name => !window[name]);
    
    if (missing.length > 0) {
      throw new Error(`Missing modules: ${missing.join(', ')}`);
    }
  }
}

// === Utilities ===
function notify(message, type = 'info') {
  console.log(`[${type.toUpperCase()}] ${message}`);
  
  const notification = document.getElementById('notification');
  if (notification) {
    notification.textContent = message;
    notification.className = `notification ${type}`;
    notification.style.display = 'block';
    
    setTimeout(() => {
      notification.style.display = 'none';
    }, 5000);
  }
}

function updateProgress(current, total, message = '') {
  const progress = document.getElementById('progress');
  const progressBar = document.getElementById('progressBar');
  const progressText = document.getElementById('progressText');
  
  if (progress && progressBar && progressText) {
    const percentage = total > 0 ? Math.round((current / total) * 100) : 0;
    progressBar.style.width = `${percentage}%`;
    progressText.textContent = message || `${current}/${total} (${percentage}%)`;
    progress.style.display = total > 0 ? 'block' : 'none';
  }
}

function isVideoFile(extension) {
  const videoExts = ['.mp4', '.avi', '.mkv', '.mov', '.wmv', '.flv', '.webm', '.m4v'];
  return videoExts.includes(extension?.toLowerCase());
}

function updateUI() {
  const elements = {
    selectedFile: document.getElementById('selectedFile'),
    batchInfo: document.getElementById('batchInfo'),
    processBtn: document.getElementById('processBtn'),
    selectBtn: document.getElementById('selectBtn')
  };
  
  const { selectedFiles, currentFile, batchMode, processing } = AppState;
  
  if (elements.selectedFile) {
    elements.selectedFile.textContent = currentFile?.name || 'No file selected';
  }
  
  if (elements.batchInfo) {
    elements.batchInfo.textContent = batchMode 
      ? `Batch mode: ${selectedFiles.length} files`
      : '';
    elements.batchInfo.style.display = batchMode ? 'block' : 'none';
  }
  
  if (elements.processBtn) {
    elements.processBtn.disabled = processing || !currentFile;
    elements.processBtn.textContent = processing ? 'Processing...' : 'Process Video';
  }
  
  if (elements.selectBtn) {
    elements.selectBtn.disabled = processing;
  }
}

// === Core Video Processing ===
async function processVideo(mode = 'both') {
  if (AppState.processing || !AppState.currentFile) {
    notify('Cannot process: no file selected or already processing', 'warning');
    return;
  }
  
  if (!AppState.modulesLoaded) {
    notify('Processing modules not loaded', 'error');
    return;
  }
  
  AppState.processing = true;
  updateUI();
  
  try {
    if (AppState.batchMode) {
      await processBatch(mode);
    } else {
      await processSingle(AppState.currentFile, mode);
    }
    
    notify('Video processing completed successfully!', 'success');
  } catch (error) {
    console.error('Processing failed:', error);
    notify(`Processing failed: ${error.message}`, 'error');
  } finally {
    AppState.processing = false;
    updateProgress(0, 0);
    updateUI();
  }
}

async function processBatch(mode) {
  const { selectedFiles } = AppState;
  const total = selectedFiles.length;
  
  for (let i = 0; i < total; i++) {
    const file = selectedFiles[i];
    updateProgress(i, total, `Processing ${file.name}...`);
    
    try {
      await processSingle(file, mode);
      notify(`Completed ${i + 1}/${total}: ${file.name}`, 'info');
    } catch (error) {
      console.error(`Failed to process ${file.name}:`, error);
      notify(`Failed: ${file.name} - ${error.message}`, 'error');
    }
  }
  
  updateProgress(total, total, 'Batch processing complete');
}

async function processSingle(file, mode) {
  const { settings } = AppState;
  
  // Step 1: Analyze video for cut detection
  updateProgress(1, 4, 'Analyzing video for cuts...');
  const analyzer = new VideoAnalyzer();
  const cuts = await analyzer.detectCuts(file.path, settings.sensitivity);
  
  // Step 2: Extract frames (if needed)
  if (mode === 'frames' || mode === 'both') {
    updateProgress(2, 4, 'Extracting frames...');
    const frameExtractor = new FrameExtractor();
    await frameExtractor.extractFrames(file.path, cuts, settings);
  }
  
  // Step 3: Extract clips (if needed)
  if (mode === 'clips' || mode === 'both') {
    updateProgress(3, 4, 'Extracting clips...');
    const clipExtractor = new ClipExtractor();
    await clipExtractor.extractClips(file.path, cuts, settings);
  }
  
  // Step 4: Import to Eagle (if available)
  updateProgress(4, 4, 'Importing to Eagle...');
  if (AppState.eagleReady && window.EagleImporter) {
    const importer = new EagleImporter();
    await importer.importResults(file.path, cuts, mode);
  }
}

// === File Selection ===
async function selectVideoFile() {
  if (AppState.processing) {
    notify('Cannot select file while processing', 'warning');
    return;
  }
  
  try {
    const files = await window.electronAPI?.selectFiles?.({
      filters: [{ name: 'Video Files', extensions: ['mp4', 'avi', 'mkv', 'mov', 'wmv', 'flv', 'webm', 'm4v'] }],
      properties: ['openFile', 'multiSelections']
    });
    
    if (files?.length > 0) {
      AppState.selectedFiles = files;
      AppState.currentFile = files[0];
      AppState.batchMode = files.length > 1;
      updateUI();
      notify(`Selected ${files.length} file(s)`, 'success');
    }
  } catch (error) {
    console.error('File selection failed:', error);
    notify('File selection failed', 'error');
  }
}

// === Eagle Integration ===
function initializeEagle() {
  if (typeof eagle === 'undefined') {
    console.log('Eagle API not available');
    return;
  }
  
  try {
    AppState.eagleReady = true;
    console.log('✅ Eagle API initialized');
    
    // Register context menu if supported
    if (eagle.contextMenu?.open) {
      setupContextMenu();
    }
    
    // Auto-detect selected files if supported
    if (eagle.item?.getSelected) {
      autoDetectSelection();
    }
    
  } catch (error) {
    console.error('Eagle initialization failed:', error);
  }
}

function setupContextMenu() {
  document.addEventListener('contextmenu', async (e) => {
    if (!AppState.eagleReady) return;
    
    try {
      const selectedItems = await eagle.item.getSelected();
      const videoFiles = selectedItems.filter(item => isVideoFile(item.ext));
      
      if (videoFiles.length > 0) {
        e.preventDefault();
        
        eagle.contextMenu.open([
          {
            id: 'process-video',
            label: '🎬 Process with Video Processor',
            click: () => handleEagleSelection(videoFiles)
          },
          {
            id: 'process-clips',
            label: '✂️ Extract Clips Only',
            click: () => handleEagleSelection(videoFiles, 'clips')
          },
          {
            id: 'process-frames', 
            label: '🖼️ Extract Frames Only',
            click: () => handleEagleSelection(videoFiles, 'frames')
          }
        ]);
      }
    } catch (error) {
      console.error('Context menu error:', error);
    }
  });
}

function handleEagleSelection(files, mode = 'both') {
  AppState.selectedFiles = files;
  AppState.currentFile = files[0];
  AppState.batchMode = files.length > 1;
  updateUI();
  
  if (mode !== 'both') {
    processVideo(mode);
  } else {
    notify(`${files.length} video file(s) selected from Eagle`, 'success');
  }
}

async function autoDetectSelection() {
  if (!AppState.eagleReady) return;
  
  try {
    const selectedItems = await eagle.item.getSelected();
    const videoFiles = selectedItems.filter(item => isVideoFile(item.ext));
    
    if (videoFiles.length > 0) {
      handleEagleSelection(videoFiles);
    }
  } catch (error) {
    console.error('Auto-detection failed:', error);
  }
}

// === Event Listeners ===
function setupEventListeners() {
  // Process button
  const processBtn = document.getElementById('processBtn');
  if (processBtn) {
    processBtn.addEventListener('click', () => processVideo());
  }
  
  // Select button
  const selectBtn = document.getElementById('selectBtn');
  if (selectBtn) {
    selectBtn.addEventListener('click', selectVideoFile);
  }
  
  // Settings controls
  const sensitivitySlider = document.getElementById('sensitivity');
  if (sensitivitySlider) {
    sensitivitySlider.addEventListener('input', (e) => {
      AppState.settings.sensitivity = parseFloat(e.target.value);
      const label = document.getElementById('sensitivityValue');
      if (label) label.textContent = e.target.value;
    });
  }
  
  const qualitySelect = document.getElementById('quality');
  if (qualitySelect) {
    qualitySelect.addEventListener('change', (e) => {
      AppState.settings.quality = e.target.value;
    });
  }
}

// === Initialization ===
document.addEventListener('DOMContentLoaded', async () => {
  console.log('🚀 Video Processor Plugin initializing...');
  
  try {
    // Load processing modules
    await ModuleLoader.load();
    
    // Setup UI event listeners
    setupEventListeners();
    
    // Initialize Eagle integration
    initializeEagle();
    
    // Update initial UI state
    updateUI();
    
    console.log('✅ Video Processor Plugin ready');
    
    // Auto-detect if Eagle is ready
    if (AppState.eagleReady) {
      setTimeout(autoDetectSelection, 500);
    }
    
  } catch (error) {
    console.error('❌ Plugin initialization failed:', error);
    notify('Plugin initialization failed', 'error');
  }
});

// === Global API ===
window.VideoProcessor = {
  processVideo,
  selectVideoFile
};
  AppState.selectedFiles = files;
  AppState.currentFile = files[0];
  AppState.batchMode = files.length > 1;
  updateUI();
  
  if (mode !== 'both') {
    processVideo(mode);
  } else {
    notify(`${files.length} video file(s) selected from Eagle`, 'success');
  }
async function autoDetectSelection() {
  if (!AppState.eagleReady) return;
  
  try {
    const selectedItems = await eagle.item.getSelected();
    const videoFiles = selectedItems.filter(item => isVideoFile(item.ext));
    
    if (videoFiles.length > 0) {
      handleEagleSelection(videoFiles);
    }
  } catch (error) {
    console.error('Auto-detection failed:', error);
  }
}

// === Event Listeners ===
function setupEventListeners() {
  // Process button
  const processBtn = document.getElementById('processBtn');
  if (processBtn) {
    processBtn.addEventListener('click', () => processVideo());
  }
  
  // Select button
  const selectBtn = document.getElementById('selectBtn');
  if (selectBtn) {
    selectBtn.addEventListener('click', selectVideoFile);
  }
  
  // Settings controls
  const sensitivitySlider = document.getElementById('sensitivity');
  if (sensitivitySlider) {
    sensitivitySlider.addEventListener('input', (e) => {
      AppState.settings.sensitivity = parseFloat(e.target.value);
      const label = document.getElementById('sensitivityValue');
      if (label) label.textContent = e.target.value;
    });
  }
  
  const qualitySelect = document.getElementById('quality');
  if (qualitySelect) {
    qualitySelect.addEventListener('change', (e) => {
      AppState.settings.quality = e.target.value;
    });
  }
}

// === Initialization ===
document.addEventListener('DOMContentLoaded', async () => {
  console.log('🚀 Video Processor Plugin initializing...');
  
  try {
    // Load processing modules
    await ModuleLoader.load();
    
    // Setup UI event listeners
    setupEventListeners();
    
    // Initialize Eagle integration
    initializeEagle();
    
    // Update initial UI state
    updateUI();
    
    console.log('✅ Video Processor Plugin ready');
    
    // Auto-detect if Eagle is ready
    if (AppState.eagleReady) {
      setTimeout(autoDetectSelection, 500);
    }
    
  } catch (error) {
    console.error('❌ Plugin initialization failed:', error);
    notify('Plugin initialization failed', 'error');
  }
});

// === Global API ===
window.VideoProcessor = {
  processVideo,
  selectVideoFile
};
    elements.duplicateHandling = document.getElementById('duplicateHandling');
    elements.extractionMethod = document.getElementById('extractionMethod');
    
    // 캐시 관리 요소
    elements.clearCacheBtn = document.getElementById('clearCacheBtn');
    elements.checkCacheBtn = document.getElementById('checkCacheBtn');
    elements.cacheResult = document.getElementById('cacheResult');
    elements.cacheResultContent = document.getElementById('cacheResultContent');


/**
 * 진행률 표시
 * @param {number} progress - 진행률 (0-1)
 * @param {string} message - 표시할 메시지
 */
function showProgress(progress, message) {
    if (elements.progressSection) {
        elements.progressSection.style.display = 'block';
    }
    
    if (elements.progressFill) {
        elements.progressFill.style.width = `${progress * 100}%`;
    }
    
    if (elements.progressText) {
        elements.progressText.textContent = message;
    }
    
    console.log(`📊 진행률 ${(progress * 100).toFixed(1)}%: ${message}`);
}

/**
 * 처리 결과 표시
 * @param {Object} result - 처리 결과
 * @param {number} processingTime - 처리 시간 (초)
 */
function showResults(result, processingTime) {
    if (!elements.resultsSection) return;
    
    elements.resultsSection.style.display = 'block';
    
    const summary = [];
    if (result.cutPoints > 0) summary.push(`${result.cutPoints}개 컷 변화`);
    if (result.extractedFrames > 0) summary.push(`${result.extractedFrames}개 프레임`);
    if (result.extractedClips > 0) summary.push(`${result.extractedClips}개 클립`);
    
    if (elements.resultSummary) {
        elements.resultSummary.innerHTML = `
            <div class="result-item">
                <span class="result-label">처리 결과:</span>
                <span class="result-value">${summary.join(', ')}</span>
            </div>
            <div class="result-item">
                <span class="result-label">처리 시간:</span>
                <span class="result-value">${processingTime.toFixed(1)}초</span>
            </div>
            <div class="result-item">
                <span class="result-label">파일:</span>
                <span class="result-value">${currentVideoFile.name}</span>
            </div>
        `;
    }
}

/**
 * 배치 처리 결과 표시
 * @param {Array} batchResults - 배치 처리 결과 배열
 * @param {number} totalTime - 총 처리 시간 (초)
 * @param {boolean} cancelled - 취소 여부
 */
function showBatchResults(batchResults, totalTime, cancelled) {
    if (!elements.batchResultsSection) return;
    
    elements.batchResultsSection.style.display = 'block';
    
    const successCount = batchResults.filter(r => r.success).length;
    const failCount = batchResults.length - successCount;
    
    let html = `
        <div class="batch-summary">
            <h3>배치 처리 ${cancelled ? '(취소됨)' : '완료'}</h3>
            <div class="batch-stats">
                <span class="success">✅ 성공: ${successCount}개</span>
                <span class="fail">❌ 실패: ${failCount}개</span>
                <span class="time">⏱️ 총 시간: ${totalTime.toFixed(1)}초</span>
            </div>
        </div>
        <div class="batch-details">
    `;
    
    batchResults.forEach((result, index) => {
        const status = result.success ? '✅' : '❌';
        const error = result.error ? ` (${result.error})` : '';
        html += `
            <div class="batch-result-item ${result.success ? 'success' : 'error'}">
                <span class="batch-index">${index + 1}.</span>
                <span class="batch-status">${status}</span>
                <span class="batch-filename">${result.fileName}</span>
                <span class="batch-time">${result.processingTime.toFixed(1)}s</span>
                ${error ? `<span class="batch-error">${error}</span>` : ''}
            </div>
        `;
    });
    
    html += '</div>';
    
    if (elements.batchResultsList) {
        elements.batchResultsList.innerHTML = html;
    }
    
    // 전체 결과 알림
    const message = cancelled 
        ? `배치 처리 취소됨: ${successCount}/${batchResults.length}개 완료`
        : `배치 처리 완료: ${successCount}/${batchResults.length}개 성공`;
    
    showNotification(message, cancelled ? 'warning' : (failCount > 0 ? 'warning' : 'success'));
}

/**
 * Eagle API 의존성 확인
 */
async function checkFFmpegDependency() {
    try {
        if (typeof eagle.extraModule === 'undefined' || typeof eagle.extraModule.ffmpeg === 'undefined') {
            console.warn('Eagle extraModule.ffmpeg를 사용할 수 없습니다.');
            return false;
        }
        
        const isInstalled = await eagle.extraModule.ffmpeg.isInstalled();
        
        if (!isInstalled) {
            console.log('FFmpeg 의존성이 설치되지 않았습니다. 설치를 시도합니다.');
            showNotification('FFmpeg 의존성을 설치하고 있습니다...', 'info');
            
            try {
                await eagle.extraModule.ffmpeg.install();
                showNotification('FFmpeg 의존성 설치가 완료되었습니다.', 'success');
                return true;
            } catch (installError) {
                console.error('FFmpeg 의존성 설치 실패:', installError);
                showNotification('FFmpeg 의존성 설치에 실패했습니다.', 'error');
                return false;
            }
        } else {
            console.log('FFmpeg 의존성이 이미 설치되어 있습니다.');
            return true;
        }
    } catch (error) {
        console.error('FFmpeg 의존성 확인 실패:', error);
        return false;
    }
}

/**
 * Eagle FFmpeg 바이너리 경로 가져오기
 */
async function getFFmpegPaths() {
    try {
        if (typeof eagle.extraModule === 'undefined' || typeof eagle.extraModule.ffmpeg === 'undefined') {
            throw new Error('Eagle extraModule.ffmpeg를 사용할 수 없습니다.');
        }
        
        const paths = await eagle.extraModule.ffmpeg.getPaths();
        console.log('FFmpeg 바이너리 경로:', paths);
        
        return {
            ffmpeg: paths.ffmpeg,
            ffprobe: paths.ffprobe
        };
    } catch (error) {
        console.error('FFmpeg 경로 가져오기 실패:', error);
        throw error;
    }
}

/**
 * 캐시 상태 확인
 */
async function checkCacheStatus() {
    if (!window.eagleUtils) {
        console.error('eagleUtils를 사용할 수 없습니다.');
        return;
    }
    
    const fs = eagleUtils.getFS();
    if (!fs) return;
    
    let totalFiles = 0;
    let totalSize = 0;
    
    for (const dirPath of eagleUtils.getAllCacheDirectories()) {
        try {
            if (fs.existsSync(dirPath)) {
                const files = fs.readdirSync(dirPath);
                for (const file of files) {
                    const filePath = eagleUtils.joinPath(dirPath, file);
                    const stats = fs.statSync(filePath);
                    if (stats.isFile()) {
                        totalFiles++;
                        totalSize += stats.size;
                    }
                }
            }
        } catch (error) {
            console.error('캐시 확인 실패:', error);
        }
    }
    
    const resultEl = document.getElementById('cacheResult');
    const contentEl = document.getElementById('cacheResultContent');
    
    if (resultEl && contentEl) {
        resultEl.style.display = 'block';
        if (totalFiles === 0) {
            resultEl.className = 'cache-result success';
            contentEl.innerHTML = '✅ 캐시가 비어있습니다.';
        } else {
            resultEl.className = 'cache-result warning';
            contentEl.innerHTML = `📊 총 ${totalFiles}개 파일, ${eagleUtils.formatFileSize(totalSize)}`;
        }
    }
}

/**
 * 캐시 정리
 */
async function clearCache() {
    if (!confirm('모든 캐시 파일을 삭제하시겠습니까?')) return;
    
    if (!window.eagleUtils) {
        console.error('eagleUtils를 사용할 수 없습니다.');
        return;
    }
    
    const resultEl = document.getElementById('cacheResult');
    const contentEl = document.getElementById('cacheResultContent');
    
    if (resultEl && contentEl) {
        resultEl.style.display = 'block';
        resultEl.className = 'cache-result info';
        contentEl.innerHTML = '캐시를 삭제 중...';
    }
    
    try {
        const result = await eagleUtils.clearAllCache();
        if (resultEl && contentEl) {
            if (result.success) {
                resultEl.className = 'cache-result success';
                contentEl.innerHTML = `✅ ${result.deletedFiles}개 파일 삭제 완료`;
            } else {
                resultEl.className = 'cache-result error';
                contentEl.innerHTML = '❌ 일부 파일 삭제 실패';
            }
        }
    } catch (error) {
        if (resultEl && contentEl) {
            resultEl.className = 'cache-result error';
            contentEl.innerHTML = `❌ 삭제 실패: ${error.message}`;
        }
    }
}

/**
 * 결과 폴더 열기
 */
function openResultsFolder() {
    try {
        if (!window.eagleUtils) {
            console.error('eagleUtils를 사용할 수 없습니다.');
            alert('결과 폴더를 열 수 없습니다.');
            return;
        }
        
        // 캐시 디렉토리들 가져오기
        const directories = eagleUtils.getAllCacheDirectories();
        
        if (directories.length === 0) {
            alert('열 수 있는 결과 폴더가 없습니다.');
            return;
        }
        
        // 첫 번째 디렉토리를 열기 (clips 폴더)
        const targetDir = directories[0]; // '/Users/ysk/assets/temp/clips'
        
        // macOS에서 Finder로 폴더 열기
        if (typeof eagle !== 'undefined' && eagle.shell && eagle.shell.openPath) {
            eagle.shell.openPath(targetDir);
        } else {
            // 폴백: 시스템 명령어 사용
            const { spawn } = eagleUtils.getNodeModule('child_process') || {};
            if (spawn) {
                spawn('open', [targetDir]);
            } else {
                console.warn('폴더 열기를 지원하지 않습니다.');
                alert(`결과 폴더 경로: ${targetDir}`);
            }
        }
        
        console.log('결과 폴더 열기:', targetDir);
        
    } catch (error) {
        console.error('결과 폴더 열기 실패:', error);
        alert('결과 폴더를 열 수 없습니다.');
    }
}

// 플러그인 초기화
document.addEventListener('DOMContentLoaded', async () => {
    console.log('Video Processor 플러그인 초기화 시작...');
    
    try {
        // DOM 요소 초기화
        initializeElements();
        
        // Eagle API 확인
        if (typeof eagle !== 'undefined') {
            console.log('Eagle API 사용 가능:', eagle.app?.version || 'unknown');
        } else {
            console.warn('Eagle API를 사용할 수 없습니다. 일부 기능이 제한될 수 있습니다.');
        }
        
        // 전역 유틸리티 확인 및 모듈 상태 설정
        if (typeof eagleUtils !== 'undefined') {
            console.log('EagleUtils 로드 완료');
        } else {
            console.error('EagleUtils가 로드되지 않았습니다.');
        }
        
        if (typeof configManager !== 'undefined') {
            console.log('ConfigManager 로드 완료');
        } else {
            console.error('ConfigManager가 로드되지 않았습니다.');
        }
        
        // 처리 모듈들 확인
        const requiredModules = ['VideoAnalyzer', 'FrameExtractor', 'ClipExtractor', 'EagleImporter'];
        const availableModules = requiredModules.filter(module => window[module]);
        
        console.log('확인된 모듈들:', availableModules);
        console.log('전역 객체 상태:', {
            VideoAnalyzer: typeof window.VideoAnalyzer,
            FrameExtractor: typeof window.FrameExtractor,
            ClipExtractor: typeof window.ClipExtractor,
            EagleImporter: typeof window.EagleImporter,
            eagleUtils: typeof window.eagleUtils,
            configManager: typeof window.configManager
        });
        
        if (availableModules.length === requiredModules.length) {
            console.log('✅ 모든 처리 모듈 로드 완료:', availableModules);
            modulesLoaded = true;
        } else {
            const missingModules = requiredModules.filter(module => !window[module]);
            console.warn('⚠️ 일부 모듈이 로드되지 않았습니다:', missingModules);
            console.log('사용 가능한 모듈:', availableModules);
            
            // 필수 모듈이 없어도 기본 기능은 동작하도록 설정하되, 더 자세한 로그 출력
            if (availableModules.length > 0) {
                console.log('일부 모듈만으로도 동작을 시도합니다.');
                modulesLoaded = true;
            } else {
                console.error('처리 모듈이 전혀 로드되지 않았습니다.');
                modulesLoaded = false;
            }
        }
        
        // 이벤트 리스너 설정
        setupEventListeners();
        
        // Eagle API 연동 설정
        checkEagleAPI();
        setupContextMenuIntegration();
        
        // 초기 UI 상태 설정
        updateSensitivityValue();
        updateQualityValue();
        updateInHandleValue();
        updateOutHandleValue();
        
        console.log('Video Processor 플러그인 초기화 완료');
        
        // Eagle이 이미 준비되어 있다면 즉시 자동 감지 시도
        if (isEagleReady && modulesLoaded) {
            setTimeout(() => {
                autoDetectSelectedFile();
            }, 500);
        }
        
    } catch (error) {
        console.error('플러그인 초기화 실패:', error);
        alert(`플러그인 초기화에 실패했습니다: ${error.message}`);
    }
});

// 전역 함수 등록 (최소화)
window.VideoProcessor = {
  processVideo,
  selectVideoFile
};