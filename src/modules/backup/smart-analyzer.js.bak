/**
 * SmartAnalyzer - 스마트 컷 분석 및 그룹화 모듈
 * 엄격한 유사도 기반으로 컷을 그룹화합니다.
 */

// 브라우저 환경에서 필요한 전역 변수들
const fs_sa = window.require ? window.require('fs') : null;
const path_sa = window.require ? window.require('path') : null;
const { spawn: spawn_sa } = window.require ? window.require('child_process') : { spawn: null };

class SmartAnalyzer {
    constructor(ffmpegPaths = null) {
        // 통합된 캐시 디렉토리 사용
        const os_sa = window.require ? window.require('os') : null;
        const homeDir = os_sa ? os_sa.homedir() : '/tmp';
        this.outputDir = path_sa ? path_sa.join(homeDir, '.video-processor-cache', 'analysis') : `${homeDir}/.video-processor-cache/analysis`;
        this.ffmpegPaths = ffmpegPaths;
        this.ensureOutputDirectory();
    }

    /**
     * 썸네일 생성 - Eagle API 활용
     */
    async generateThumbnails(groups) {
        console.log('🖌️ 썸네일 생성 시작');
        
        let generatedCount = 0;
        let failedCount = 0;
        
        for (const group of groups) {
            // 대표 프레임 썸네일 생성
            if (group.representative && group.representative.framePath) {
                const thumbnail = await this.createThumbnailWithEagle(group.representative.framePath);
                if (thumbnail) {
                    group.representative.thumbnail = thumbnail;
                    generatedCount++;
                } else {
                    failedCount++;
                }
            }
            
            // 모든 멤버 프레임 썸네일 생성
            for (const member of group.members) {
                if (member.framePath) {
                    const thumbnail = await this.createThumbnailWithEagle(member.framePath);
                    if (thumbnail) {
                        member.thumbnail = thumbnail;
                        generatedCount++;
                    } else {
                        failedCount++;
                    }
                }
            }
        }
        
        console.log(`🖌️ 썸네일 생성 완료: 성공 ${generatedCount}개, 실패 ${failedCount}개`);
    }

    /**
     * Eagle API를 사용하여 썸네일 생성
     */
    async createThumbnailWithEagle(filePath) {
        try {
            // Eagle API가 사용 가능한지 확인
            if (typeof eagle !== 'undefined' && eagle.app && eagle.app.createThumbnailFromPath) {
                console.log('🦅 Eagle API로 썸네일 생성:', filePath);
                
                // Eagle API로 썸네일 생성
                const img = await eagle.app.createThumbnailFromPath(filePath, {
                    width: 320,
                    height: 240
                });
                
                // base64로 변환
                const base64 = img.toDataURL();
                console.log('✅ Eagle 썸네일 생성 성공:', filePath);
                
                return base64;
            } else {
                // Eagle API를 사용할 수 없는 경우 기존 방법 사용
                console.log('📁 파일 시스템으로 썸네일 생성:', filePath);
                return await this.fileToBase64(filePath);
            }
        } catch (error) {
            console.error('Eagle 썸네일 생성 실패:', error);
            // 실패 시 기존 방법으로 폴백
            return await this.fileToBase64(filePath);
        }
    }

    /**
     * 파일을 base64로 변환 (폴백용)
     */
    async fileToBase64(filePath) {
        try {
            if (!fs_sa || !fs_sa.existsSync(filePath)) {
                console.warn('썸네일 파일을 찾을 수 없음:', filePath);
                return null;
            }
            
            const imageBuffer = fs_sa.readFileSync(filePath);
            const base64 = imageBuffer.toString('base64');
            const mimeType = 'image/jpeg';
            
            return `data:${mimeType};base64,${base64}`;
        } catch (error) {
            console.error('Base64 변환 실패:', error);
            return null;
        }
    }

    /**
     * 출력 디렉토리 생성 확인
     */
    ensureOutputDirectory() {
        if (fs_sa && !fs_sa.existsSync(this.outputDir)) {
            fs_sa.mkdirSync(this.outputDir, { recursive: true });
        }
    }

    /**
     * FFmpeg 경로 설정
     * @param {Object} ffmpegPaths - ffmpeg, ffprobe 경로 객체
     */
    setFFmpegPaths(ffmpegPaths) {
        this.ffmpegPaths = ffmpegPaths;
    }

    /**
     * 스마트 컷 분석 및 그룹화 메인 함수
     * @param {string} videoPath - 비디오 파일 경로
     * @param {Array} cutPoints - 컷 포인트 배열
     * @param {Object} settings - 분석 설정
     * @param {function} progressCallback - 진행률 콜백
     * @returns {Promise<Object>} 그룹화된 결과
     */
    async analyzeAndGroupCuts(videoPath, cutPoints, settings = {}, progressCallback = null) {
        try {
            console.log('🧠 스마트 컷 분석 시작:', cutPoints.length, '개의 컷');
            
            if (progressCallback) progressCallback(0.1, '프레임 추출 준비 중...');
            
            // 1단계: 각 컷의 대표 프레임 추출
            const frameData = await this.extractRepresentativeFrames(videoPath, cutPoints, progressCallback);
            
            if (progressCallback) progressCallback(0.6, '유사도 분석 중...');
            
            // 2단계: 프레임 유사도 분석
            const similarityMatrix = await this.analyzeSimilarity(frameData, settings);
            
            if (progressCallback) progressCallback(0.8, '그룹화 진행 중...');
            
            // 3단계: 엄격한 기준으로 그룹화
            const groups = await this.groupBySimilarity(frameData, similarityMatrix, settings);
            
            // 4단계: 썸네일 생성 (Eagle API 사용)
            if (progressCallback) progressCallback(0.9, '썸네일 생성 중...');
            await this.generateThumbnails(groups);
            
            if (progressCallback) progressCallback(1.0, '스마트 분석 완료!');
            
            console.log('🧠 스마트 분석 완료:', {
                totalCuts: cutPoints.length,
                groups: groups.length,
                reduction: `${cutPoints.length} → ${groups.length} 그룹 (${((1 - groups.length/cutPoints.length) * 100).toFixed(1)}% 축약)`
            });
            
            return {
                groups: groups,
                originalCuts: cutPoints.length,
                groupCount: groups.length,
                reductionRate: (1 - groups.length/cutPoints.length) * 100
            };
            
        } catch (error) {
            console.error('스마트 분석 실패:', error);
            throw new Error('스마트 분석에 실패했습니다: ' + error.message);
        }
    }

    /**
     * 각 컷의 대표 프레임 추출
     * @param {string} videoPath - 비디오 파일 경로
     * @param {Array} cutPoints - 컷 포인트 배열
     * @param {function} progressCallback - 진행률 콜백
     * @returns {Promise<Array>} 프레임 데이터 배열
     */
    async extractRepresentativeFrames(videoPath, cutPoints, progressCallback) {
        const frameData = [];
        const videoName = path_sa ? path_sa.basename(videoPath, path_sa.extname(videoPath)) : 'video';
        
        console.log('📸 대표 프레임 추출 시작:', cutPoints.length, '개');
        
        // 병렬 처리로 빠르게 추출
        const batchSize = 4; // 동시 처리 수 (안정성을 위해 줄임)
        
        for (let i = 0; i < cutPoints.length; i += batchSize) {
            const batch = cutPoints.slice(i, i + batchSize);
            
            const batchPromises = batch.map(async (cutPoint, batchIndex) => {
                const globalIndex = i + batchIndex;
                const middleTime = cutPoint.start + (cutPoint.duration / 2);
                const frameFileName = `${videoName}_frame_${(globalIndex + 1).toString().padStart(3, '0')}.jpg`;
                const framePath = path_sa ? path_sa.join(this.outputDir, frameFileName) : `${this.outputDir}/${frameFileName}`;
                
                try {
                    const success = await this.extractSingleFrame(videoPath, middleTime, framePath);
                    
                    if (success) {
                        // 프레임 특징 분석
                        const features = await this.analyzeFrameFeatures(framePath);
                        
                        return {
                            cutIndex: globalIndex,
                            cutPoint: cutPoint,
                            framePath: framePath,
                            fileName: frameFileName,
                            features: features,
                            timestamp: middleTime
                        };
                    }
                } catch (error) {
                    console.error(`프레임 ${globalIndex + 1} 추출 실패:`, error.message);
                }
                
                return null;
            });
            
            const batchResults = await Promise.allSettled(batchPromises);
            
            // 성공한 결과만 추가
            batchResults.forEach((result) => {
                if (result.status === 'fulfilled' && result.value) {
                    frameData.push(result.value);
                }
            });
            
            // 진행률 업데이트
            if (progressCallback) {
                const progress = 0.1 + ((i + batch.length) / cutPoints.length) * 0.5;
                progressCallback(progress, `프레임 추출: ${Math.min(i + batch.length, cutPoints.length)}/${cutPoints.length}`);
            }
            
            // 배치 간 짧은 대기
            if (i + batchSize < cutPoints.length) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
        
        console.log('📸 대표 프레임 추출 완료:', frameData.length, '개');
        return frameData;
    }

    /**
     * 단일 프레임 추출
     * @param {string} videoPath - 비디오 파일 경로
     * @param {number} timeSeconds - 추출할 시간 (초)
     * @param {string} outputPath - 출력 파일 경로
     * @returns {Promise<boolean>} 성공 여부
     */
    async extractSingleFrame(videoPath, timeSeconds, outputPath) {
        return new Promise((resolve) => {
            const args = [
                '-i', videoPath,
                '-ss', timeSeconds.toFixed(3),
                '-frames:v', '1',
                '-q:v', '2', // 고품질
                '-s', '320x240', // 분석용 작은 크기
                '-y',
                outputPath
            ];

            const ffmpeg = spawn_sa(this.ffmpegPaths.ffmpeg, args);
            
            let stderr = '';
            
            ffmpeg.stderr.on('data', (data) => {
                stderr += data.toString();
            });

            ffmpeg.on('close', (code) => {
                if (code === 0 && fs_sa && fs_sa.existsSync(outputPath)) {
                    resolve(true);
                } else {
                    console.warn(`프레임 추출 실패: ${path_sa.basename(outputPath)}`);
                    resolve(false);
                }
            });

            ffmpeg.on('error', (error) => {
                console.error('FFmpeg 프레임 추출 오류:', error.message);
                resolve(false);
            });
        });
    }

    /**
     * 프레임 특징 분석 (간단한 히스토그램 기반)
     * @param {string} framePath - 프레임 파일 경로
     * @returns {Promise<Object>} 프레임 특징
     */
    async analyzeFrameFeatures(framePath) {
        // 실제 구현에서는 Canvas API나 이미지 분석 라이브러리를 사용
        // 여기서는 간단한 버전으로 구현
        return new Promise((resolve) => {
            if (!fs_sa || !fs_sa.existsSync(framePath)) {
                resolve({ histogram: [], brightness: 0, contrast: 0 });
                return;
            }
            
            // 파일 크기와 수정 시간을 기반으로 간단한 특징 생성
            const stats = fs_sa.statSync(framePath);
            const fileSize = stats.size;
            const fileName = path_sa.basename(framePath);
            
            // 간단한 해시 기반 특징 (실제로는 이미지 분석이 필요)
            const features = {
                fileSize: fileSize,
                simpleHash: this.generateSimpleHash(fileName + fileSize),
                timestamp: stats.mtime.getTime(),
                // 실제 구현 시 추가할 특징들:
                // - 색상 히스토그램
                // - 엣지 검출 결과
                // - 밝기/대비
                // - 얼굴 검출 (가능한 경우)
            };
            
            resolve(features);
        });
    }

    /**
     * 간단한 해시 생성 (실제로는 이미지 해시 사용)
     * @param {string} input - 입력 문자열
     * @returns {string} 해시 값
     */
    generateSimpleHash(input) {
        let hash = 0;
        for (let i = 0; i < input.length; i++) {
            const char = input.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // 32비트 정수로 변환
        }
        return hash.toString();
    }

    /**
     * 유사도 분석
     * @param {Array} frameData - 프레임 데이터 배열
     * @param {Object} settings - 분석 설정
     * @returns {Promise<Array>} 유사도 매트릭스
     */
    async analyzeSimilarity(frameData, settings) {
        console.log('🔍 유사도 분석 시작');
        
        const similarity = settings.similarity || 0.95; // 기본값: 95% 유사도
        const matrix = [];
        
        for (let i = 0; i < frameData.length; i++) {
            matrix[i] = [];
            for (let j = 0; j < frameData.length; j++) {
                if (i === j) {
                    matrix[i][j] = 1.0; // 자기 자신과는 100% 유사
                } else {
                    // 간단한 유사도 계산 (실제로는 이미지 비교 알고리즘 사용)
                    const similarity = this.calculateFrameSimilarity(frameData[i], frameData[j]);
                    matrix[i][j] = similarity;
                }
            }
        }
        
        console.log('🔍 유사도 분석 완료');
        return matrix;
    }

    /**
     * 두 프레임 간 유사도 계산
     * @param {Object} frame1 - 첫 번째 프레임 데이터
     * @param {Object} frame2 - 두 번째 프레임 데이터
     * @returns {number} 유사도 (0-1)
     */
    calculateFrameSimilarity(frame1, frame2) {
        // 실제 구현에서는 이미지 분석 라이브러리 사용
        // 여기서는 간단한 버전으로 시뮬레이션
        
        // 파일 크기 유사도
        const sizeDiff = Math.abs(frame1.features.fileSize - frame2.features.fileSize);
        const maxSize = Math.max(frame1.features.fileSize, frame2.features.fileSize);
        const sizeSimilarity = 1 - (sizeDiff / maxSize);
        
        // 시간 간격 (너무 가까우면 더 유사할 가능성)
        const timeDiff = Math.abs(frame1.timestamp - frame2.timestamp);
        const timeSimilarity = timeDiff < 5 ? 0.8 : 0.3; // 5초 이내면 유사할 가능성
        
        // 간단한 해시 비교
        const hashSimilarity = frame1.features.simpleHash === frame2.features.simpleHash ? 0.9 : 0.1;
        
        // 가중 평균
        const totalSimilarity = (sizeSimilarity * 0.3 + timeSimilarity * 0.3 + hashSimilarity * 0.4);
        
        return Math.max(0, Math.min(1, totalSimilarity));
    }

    /**
     * 엄격한 기준으로 그룹화
     * @param {Array} frameData - 프레임 데이터 배열
     * @param {Array} similarityMatrix - 유사도 매트릭스
     * @param {Object} settings - 설정
     * @returns {Promise<Array>} 그룹 배열
     */
    async groupBySimilarity(frameData, similarityMatrix, settings) {
        console.log('🎯 엄격한 그룹화 시작');
        
        const threshold = settings.similarityThreshold || 0.95; // 95% 이상만 그룹화
        const groups = [];
        const assigned = new Set();
        
        for (let i = 0; i < frameData.length; i++) {
            if (assigned.has(i)) continue;
            
            const group = {
                id: groups.length + 1,
                representative: frameData[i], // 대표 프레임
                members: [frameData[i]], // 그룹 멤버들
                memberIndices: [i],
                avgSimilarity: 1.0,
                isGroup: false // 단일 컷인지 그룹인지
            };
            
            assigned.add(i);
            
            // 매우 유사한 프레임들을 찾아서 그룹에 추가
            for (let j = i + 1; j < frameData.length; j++) {
                if (assigned.has(j)) continue;
                
                if (similarityMatrix[i][j] >= threshold) {
                    group.members.push(frameData[j]);
                    group.memberIndices.push(j);
                    assigned.add(j);
                    group.isGroup = true;
                }
            }
            
            // 평균 유사도 계산
            if (group.members.length > 1) {
                let totalSimilarity = 0;
                let comparisons = 0;
                
                for (let m1 = 0; m1 < group.memberIndices.length; m1++) {
                    for (let m2 = m1 + 1; m2 < group.memberIndices.length; m2++) {
                        totalSimilarity += similarityMatrix[group.memberIndices[m1]][group.memberIndices[m2]];
                        comparisons++;
                    }
                }
                
                group.avgSimilarity = comparisons > 0 ? totalSimilarity / comparisons : 1.0;
            }
            
            groups.push(group);
        }
        
        // 그룹 크기순으로 정렬 (큰 그룹부터)
        groups.sort((a, b) => b.members.length - a.members.length);
        
        console.log('🎯 그룹화 완료:', {
            totalGroups: groups.length,
            singleCuts: groups.filter(g => !g.isGroup).length,
            actualGroups: groups.filter(g => g.isGroup).length,
            largestGroup: Math.max(...groups.map(g => g.members.length))
        });
        
        return groups;
    }

    /**
     * 그룹에서 컷 분리
     * @param {Array} groups - 현재 그룹 배열
     * @param {number} groupId - 대상 그룹 ID
     * @param {number} cutIndex - 분리할 컷 인덱스
     * @returns {Array} 업데이트된 그룹 배열
     */
    separateCutFromGroup(groups, groupId, cutIndex) {
        console.log(`✂️ 컷 분리: 그룹 ${groupId}에서 컷 ${cutIndex} 분리`);
        
        // 대상 그룹 찾기
        const targetGroup = groups.find(g => g.id === groupId);
        if (!targetGroup || targetGroup.members.length <= 1) {
            console.warn('분리할 수 없는 그룹입니다.');
            return groups;
        }
        
        // 분리할 컷 찾기
        const cutToSeparate = targetGroup.members.find(m => m.cutIndex === cutIndex);
        if (!cutToSeparate) {
            console.warn('해당 컷을 찾을 수 없습니다.');
            return groups;
        }
        
        // 원래 그룹에서 제거
        targetGroup.members = targetGroup.members.filter(m => m.cutIndex !== cutIndex);
        targetGroup.memberIndices = targetGroup.memberIndices.filter(idx => 
            targetGroup.members.some(m => m.cutIndex === idx)
        );
        
        // 새로운 그룹 생성
        const newGroup = {
            id: Math.max(...groups.map(g => g.id)) + 1,
            representative: cutToSeparate,
            members: [cutToSeparate],
            memberIndices: [cutIndex],
            avgSimilarity: 1.0,
            isGroup: false,
            separated: true // 분리된 그룹 표시
        };
        
        // 원래 그룹이 하나만 남으면 그룹 해제
        if (targetGroup.members.length === 1) {
            targetGroup.isGroup = false;
        }
        
        groups.push(newGroup);
        
        console.log(`✂️ 분리 완료: 새 그룹 ${newGroup.id} 생성`);
        
        return groups;
    }

    /**
     * 임시 파일 정리
     */
    cleanup() {
        try {
            if (fs_sa && fs_sa.existsSync(this.outputDir)) {
                const files = fs_sa.readdirSync(this.outputDir);
                files.forEach(file => {
                    const filePath = path_sa ? path_sa.join(this.outputDir, file) : `${this.outputDir}/${file}`;
                    if (fs_sa.statSync(filePath).isFile()) {
                        fs_sa.unlinkSync(filePath);
                    }
                });
                console.log('🧹 분석 임시 파일 정리 완료');
            }
        } catch (error) {
            console.error('분석 파일 정리 실패:', error);
        }
    }
}

// 브라우저 환경에서 전역 객체로 등록
window.SmartAnalyzer = SmartAnalyzer;